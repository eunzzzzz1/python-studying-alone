# ----------------- 자료형을 확인할 때 쓰는 함수 type()
print("----------------- 자료형을 확인할 때 쓰는 함수 type()")

print("type(\"안녕하세요\") 를 출력하면 : ", type("안녕하세요"))
print('type(\'안녕하세요\') 를 출력하면 : ', type('안녕하세요'))
print("type(273) 를 출력하면 : ", type(273))

# 출력물
# type("안녕하세요") 를 출력하면 :  <class 'str'>
# type('안녕하세요') 를 출력하면 :  <class 'str'>
# type(273) 를 출력하면 :  <class 'int'>

# 파이썬에서는 자바와 달리 큰 따옴표와 작은 따옴표를 구분짓지 않는다!

# ----------------- 이스케이프 문자를 활용해 문자열 만들기
print("----------------- 이스케이프 문자를 활용해 문자열 만들기")

# p52 직접 해보는 손코딩 - string_operator.py
# \t 탭을 의미합니다.
# \n 줄바꿈을 의미합니다.

## \t 활용하기
print("이름\t나이\t지역")
print("김은지\t25\t인천대")
print("김동연\t23\t부산대")
print("김구름\t10\t와플대")

# 출력물
# 이름	나이	지역
# 김은지	25	인천대
# 김동연	23	부산대
# 김구름	10	와플대

# ----------------- 여러 줄 문자열 만들기
print("----------------- 여러 줄 문자열 만들기")

# 파이썬에서는 큰따옴표 3개 (""") or 작은따옴표 3개 (''')를 반복한 기호를 사용하면
# 여러 줄 문자열을 쓸 수있다. 진짜 편하네 ~
# 자바에서는 \n을 일일히 써주거나 System.out.println("") 으로 일일히 한 줄 씩 써줬어야했는데!

print("""파이썬에서는
큰 따옴표 세개나, 작은 따옴표 3개를 반복한 기호를 사용하면
여러 줄 문자열을 사용할 수 있다!
자바에서는 한 줄 띄울 때마다 \\n을 일일히 써주거나,
System.out.println(\"\") 으로 일일히 한 줄 씩 써줬어야 했는데.
정말 편리하구나~""")

# 출력물
# 파이썬에서는
# 큰 따옴표 세개나, 작은 따옴표 3개를 반복한 기호를 사용하면
# 여러 줄 문자열을 사용할 수 있다!
# 자바에서는 한 줄 띄울 때마다 \n을 일일히 써주거나,
# System.out.println("") 으로 일일히 한 줄 씩 써줬어야 했는데.
# 정말 편리하구나~


print("""
오히려 \
줄을 바꾸지 않을 때 \
이스케이프 문자를 써주면 되니까
정말 편리한 것 같아.""")

# 출력물
#
# 오히려 줄을 바꾸지 않을 때 이스케이프 문자를 써주면 되니까
# 정말 편리한 것 같아.

# ----------------- 문자열 연산자 1. '+'
print("----------------- 문자열 연산자 1. '+'")

# 1-1. 문자열 + 문자열
print("안녕" + "하세요")
print("안녕" + "하세요" + "!")

# 출력물
# 안녕하세요
# 안녕하세요!

# 1-2. 문자열 + int 자료형
# print("안녕" + 1)
# TypeError: can only concatenate str (not "int") to str
# 오류가 뜬다...! 자바는 알아서 String으로 형변환해서 문자열 취급을 했는데.
# 오히려 이런 면에서는 조금 더 빡세구나.

# ----------------- 문자열 연산자 2. '*'
print("----------------- 문자열 연산자 2. '*'")

# 오... 곱하기를 지원하는건 신선하다.

print("안녕하세요" * 3)
print(4 * "안녕하세요")
# 출력물
# 안녕하세요안녕하세요안녕하세요
# 안녕하세요안녕하세요안녕하세요안녕하세요


# ----------------- 문자열 연산자 3. '[] - 인덱싱'
print("----------------- 문자열 연산자 3. '[] - 인덱싱'")

# 자바에서는... toCharArray()를 통해서 문자 배열로 만들어줬어야 가능했던건데
# 여기서는 따로 char 배열로 바꿔주지 않아도 지원해준다.

print("안녕하세요"[0])
print("안녕하세요"[1])
print("안녕하세요"[2])
print("안녕하세요"[3])
print("안녕하세요"[4])

# 출력물
# 안
# 녕
# 하
# 세
# 요

# 대박. -를 활용해서 뒤에서 부터도 출력이 가능하다. 너무 신기해!
print()

print("안녕하세요"[-1])
print("안녕하세요"[-2])
print("안녕하세요"[-3])
print("안녕하세요"[-4])
print("안녕하세요"[-5])

# 출력물
# 요
# 세
# 하
# 녕
# 안

# ----------------- 문자열 연산자 4. ': - 슬라이싱'
print("----------------- 문자열 연산자 4. ': - 슬라이싱'")

# 문자열의 특정 범위를 선택할 떄 사용하는 연산자.
# 그.. 뭐냐. 자바에서 slice(n,m) 이랑 같은거네!

print("안녕하세요"[1:4])
# 출력물 : 녕하세

# 첫 번째 값을 생략하면 가장 앞쪽의 위치부터,
# 두 번째 값을 생략하면 가장 마지막 위치까지 잘라온다.

print("안녕하세요"[:3])
# 출력물 : 안녕하
print("안녕하세요"[2:])
# 출력물 : 하세요

# ----------------- 문자열 길이 구하기 len()
print("----------------- 문자열 길이 구하기 len()")
# 자바의 length()와 같은거군..

print("안녕하세요의 길이는", len("안녕하세요"))
# 출력물 : 안녕하세요의 길이는 5




